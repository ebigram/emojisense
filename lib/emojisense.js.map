{"version":3,"sources":["../src/emojisense.js"],"names":["CodeMirror","require","app","remote","modulePath","getAppPath","EmojiProvider","module","exports","createHints","list","textCursor","hints","map","elem","idx","arr","text","displayText","rightLabel","hint","cm","data","cur","token","getTokenAt","line","getDoc","replaceRange","ch","start","end","activate","global","inkdrop","onEditorLoad","handleEditorDidLoad","bind","deactivate","editor","getActiveEditor","off","handleComplete","ep","cursor","getCursor","results","getSuggestions","length","from","Pos","to","loadProperties","on","event","state","completionActive","key","keyCode","commands","dispatch","document","body","stopPropagation","add","showHint"],"mappings":"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","sourcesContent":["'use babel'\nconst CodeMirror = require('codemirror')\nconst app = require('electron').remote.app\nconst modulePath = app.getAppPath() + '/node_modules/'\nrequire(`${modulePath}codemirror/addon/hint/show-hint`)\nrequire('codemirror/addon/hint/show-hint')\nconst { EmojiProvider } = require('./EmojiProvider')\nmodule.exports = {\n\n\n/**\n * @param {CodeMirror.Position} textCursor\n * @returns {CodeMirror.Hint[]}\n * @param {any[]} list\n */\ncreateHints(list, textCursor) {\n    const /**\n         * @param {{ text: any rightLabel: any }} elem\n         * @param {any} idx\n         * @param {any} arr\n         */\n hints = list.map((elem, idx, arr) => ({\n\n        text: elem.text,\n        displayText: `${elem.text} ${elem.rightLabel}`,\n        /**@param {HTMLLIElement} e \n        @param {CodeMirror.Hint} cur */\n        //render: (e, data, cur) => { e.appendChild(cur.) }\n        //from?: Position\n        /** Called if a completion is picked. If provided *you* are responsible for applying the completion */\n        /**@param {CodeMirror.Editor} cm \n         * @param {CodeMirror.Hints} data\n         * @param {CodeMirror.Hint} cur\n        */\n        hint: (cm, data, cur) => {\n            /**@type {CodeMirror.Token} token*/\n            const token = cm.getTokenAt(textCursor)\n            const line = textCursor.line\n            cm.getDoc().replaceRange(cur.text, { line: line, ch: token.start - 1}, { line: line, ch: token.end })\n        }\n        //render?: (element: HTMLLIElement, data: Hints, cur: Hint) => void\n        //to?: Position\n    }))\n    return hints\n}\n    ,\n    activate() {\n        // @ts-ignore\n        global.inkdrop.onEditorLoad(this.handleEditorDidLoad.bind(this))\n    },\n\n    deactivate: function () {\n        /** @type {CodeMirror.Editor} editor **/\n        const editor = global.inkdrop.getActiveEditor()\n        if (editor) {\n            editor.off(':', () => {\n            })\n        }\n    },\n\n\n    handleComplete(ep, cm) {\n        const cursor = cm.getCursor()\n        const token = cm.getTokenAt(cursor)\n        const start = token.start\n        const end = cursor.ch\n        const line = cursor.line\n\n        const results = ep.getSuggestions(cm)\n        return {\n            list: results.length ? this.createHints(results, cursor) : [],\n            from: CodeMirror.Pos(line, start),\n            to: CodeMirror.Pos(line, end),\n        }\n    },\n    /**\n     * @param {{ cm: CodeMirror.Editor }} editor\n     */\n    handleEditorDidLoad(editor) {\n        /** @type {CodeMirror.Editor} cm */\n        const cm = editor.cm\n        const ep = new EmojiProvider()\n        ep.loadProperties()\n\n        cm.on(\"keyup\",\n            /** @param {KeyboardEvent} event **/\n            function (cm, event) {\n                if (!cm.state.completionActive && /*Enables keyboard navigation in autocomplete list*/\n                    event.key == ':' &&\n                    event.keyCode != 13) {\n                    /*Enter - do not open autocomplete list just after item has been selected in it*/\n                    // @ts-ignore\n                    inkdrop.commands.dispatch(document.body, \"user:autocomplete\")\n                    event.stopPropagation()\n                }\n            })\n\n        // @ts-ignore\n        inkdrop.commands.add(document.body, {\n            'user:autocomplete': () => {\n                CodeMirror.showHint(cm, ()=> this.handleComplete(ep,cm))\n            }\n        }\n        )\n    }\n\n}"],"file":"emojisense.js"}