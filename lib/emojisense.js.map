{"version":3,"sources":["../src/emojisense.js"],"names":["CodeMirror","require","app","remote","modulePath","getAppPath","EmojiProvider","R","EmojiSense","constructor","ep","activate","loadProperties","console","log","editoHandler","curry","handleEditorDidLoad","global","inkdrop","onEditorLoad","bind","deactivate","editor","getActiveEditor","disposables","dispose","cm","cursor","getCursor","token","getTokenAt","start","end","ch","line","CompositeDisposable","handleCompletor","handleComplete","on","event","state","completionActive","key","keyCode","codeMirror","showHint","hint","createHints","list","textCursor","hints","map","elem","idx","arr","text","displayText","rightLabel","data","cur","getDoc","replaceRange","results","getSuggestions","length","from","Pos","to","module","exports"],"mappings":"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","sourcesContent":["// @ts-nocheck\n'use babel'\nconst CodeMirror = require('codemirror')\nimport { CompositeDisposable, Disposable } from 'event-kit'\nconst app = require('electron').remote.app\nconst modulePath = app.getAppPath() + '/node_modules/'\nrequire(modulePath + 'codemirror/addon/hint/show-hint')\nconst { EmojiProvider } = require('./EmojiProvider')\nconst R = require('ramda')\nclass EmojiSense {\n    constructor() {\n        this.ep = new EmojiProvider()\n\n    }\n\n\n    activate() {\n        this.ep.loadProperties()\n        console.log(\"activate\")\n        const editoHandler = R.curry(this.handleEditorDidLoad)(this.ep)\n        global.inkdrop.onEditorLoad(editoHandler.bind(this))\n    }\n\n    deactivate() {\n        /** @type {CodeMirror.Editor} editor **/\n        const editor = inkdrop.getActiveEditor()\n        if (this.disposables) {\n            this.disposables.dispose()\n        }\n    }\n\n    /**\n     * @param {{ cm: CodeMirror.Editor }} editor\n     */\n    handleEditorDidLoad(ep, editor) {\n        const { cm } = editor\n        const cursor = cm.getCursor()\n        const token = cm.getTokenAt(cursor)\n        const start = token.start\n        const end = cursor.ch\n        const line = cursor.line\n        const disposables = new CompositeDisposable()\n        console.log(\"editor loaded\")\n        const handleCompletor = R.curry(this.handleComplete)(ep)\n        cm.on(\"keyup\", function (cm, event) {\n            //event.stopPropogation()\n            console.log(\"keyup!\")\n            if (!cm.state.completionActive && /*Enables keyboard navigation in autocomplete list*/\n                event.key === ':' &&\n                event.keyCode != 13) {\n                /*Enables keyboard navigation in autocomplete list*/\n                //  disposables.add(new Disposable(this.handleComplete))\n                codeMirror.showHint({ hint: handleCompletor })\n            }\n        }\n        )\n\n        this.disposables = disposables\n    }\n\n    handleComplete(ep, cm) {\n        /**\n         * @param {CodeMirror.Position} textCursor\n         * @returns {CodeMirror.Hint[]}\n         * @param {any[]} list\n         */\n        function createHints(list, textCursor) {\n            const hints = list.map((elem, idx, arr) => ({\n\n                text: elem.text,\n                displayText: `${elem.text} ${elem.rightLabel}`,\n                /**@param {HTMLLIElement} e \n                @param {CodeMirror.Hint} cur */\n                //render: (e, data, cur) => { e.appendChild(cur.) }\n                //from?: Position\n                /** Called if a completion is picked. If provided *you* are responsible for applying the completion */\n                /**@param {CodeMirror.Editor} cm \n                 * @param {CodeMirror.Hints} data\n                 * @param {CodeMirror.Hint} cur\n                */\n                hint: (cm, data, cur) => {\n                    /**@type {CodeMirror.Token} token*/\n                    const token = cm.getTokenAt(textCursor)\n                    const line = textCursor.line\n                    cm.getDoc().replaceRange(cur.text, { line: line, ch: token.start - 1 }, { line: line, ch: token.end })\n                }\n                //render?: (element: HTMLLIElement, data: Hints, cur: Hint) => void\n                //to?: Position\n            }))\n            return hints\n        }\n\n        const cursor = cm.getCursor()\n        const token = cm.getTokenAt(cursor)\n        const start = token.start\n        const end = cursor.ch\n        const line = cursor.line\n        console.log(\"complete\")\n        const results = ep.getSuggestions(cm)\n        console.log(results)\n        return {\n            list: results.length ? createHints(results, cursor) : ['something1', 'something2'],\n            from: CodeMirror.Pos(line, start),\n            to: CodeMirror.Pos(line, end),\n        }\n    }\n}\nmodule.exports = new EmojiSense()"],"file":"emojisense.js"}