{"version":3,"sources":["../src/emojisense.js"],"names":["CodeMirror","require","app","remote","modulePath","getAppPath","EmojiProvider","R","EmojiSense","constructor","ep","activate","loadProperties","disposables","CompositeDisposable","editoHandler","curry","handleEditorDidLoad","global","inkdrop","onEditorLoad","bind","deactivate","editor","getActiveEditor","dispose","cm","handleCompletor","handleComplete","on","cmEditor","event","state","completionActive","keyCode","cursor","getCursor","token","getTokenAt","console","log","string","startsWith","codeMirror","showHint","hint","completeSingle","Pass","createHints","list","textCursor","hints","map","elem","idx","arr","text","displayText","rightLabel","data","cur","line","getDoc","replaceRange","ch","start","end","results","getSuggestions","length","from","Pos","to","module","exports"],"mappings":"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","sourcesContent":["\"use babel\";\nconst CodeMirror = require(\"codemirror\");\nimport { CompositeDisposable, Disposable } from \"event-kit\";\nconst app = require(\"electron\").remote.app;\nconst modulePath = app.getAppPath() + \"/node_modules/\";\nrequire(modulePath + \"codemirror/addon/hint/show-hint\");\n//require(\"codemirror/addon/hint/show-hint\")\nconst { EmojiProvider } = require(\"./EmojiProvider\");\nconst R = require(\"ramda\");\nclass EmojiSense {\n  constructor() {\n    this.ep = new EmojiProvider();\n  }\n\n  activate() {\n    this.ep.loadProperties();\n    this.disposables = new CompositeDisposable();\n    //console.log(\"activate\")\n    const editoHandler = R.curry(this.handleEditorDidLoad)(this.ep);\n    global.inkdrop.onEditorLoad(editoHandler.bind(this));\n  }\n\n  deactivate() {\n    /** @type {CodeMirror.Editor} editor **/\n    const editor = inkdrop.getActiveEditor();\n    if (this.disposables) {\n      this.disposables.dispose();\n    }\n  }\n\n  /**\n   * @param {{ cm: CodeMirror.Editor }} editor\n   */\n  handleEditorDidLoad(ep, editor) {\n    const { cm } = editor;\n    //console.log(\"editor loaded\")\n    const handleCompletor = R.curry(this.handleComplete)(ep);\n    cm.on(\"keyup\", (cmEditor, event) => {\n      if (\n        !cmEditor.state.completionActive &&\n        ((event.keyCode > 37 && event.keyCode < 91) ||\n          event.keyCode ===\n            186) /*Enables keyboard navigation in autocomplete list*/\n      ) {\n        const cursor = cmEditor.getCursor();\n        const token = cmEditor.getTokenAt(cursor);\n        /*Enter - do not open autocomplete list just after item has been selected in it*/\n\n        console.log(token.string);\n        if (token.string.startsWith(\":\"))\n          codeMirror.showHint({\n            cmEditor,\n            hint: handleCompletor,\n            completeSingle: false,\n            //closeCharacters: /\\ \\/>/\n          });\n      } else return CodeMirror.Pass;\n    });\n  }\n\n  handleComplete(ep, cm) {\n    /**\n     * @param {CodeMirror.Position} textCursor\n     * @returns {CodeMirror.Hint[]}\n     * @param {any[]} list\n     */\n    function createHints(list, textCursor) {\n      const hints = list.map((elem, idx, arr) => ({\n        text: elem.text,\n        displayText: `${elem.text} ${elem.rightLabel}`,\n        /**@param {HTMLLIElement} e \n                        @param {CodeMirror.Hint} cur */\n        //render: (e, data, cur) => { e.appendChild(cur.) }\n        //from?: Position\n        /** Called if a completion is picked. If provided *you* are responsible for applying the completion */\n        /**@param {CodeMirror.Editor} cm\n         * @param {CodeMirror.Hints} data\n         * @param {CodeMirror.Hint} cur\n         */\n        hint: (cm, data, cur) => {\n          /**@type {CodeMirror.Token} token*/\n          const token = cm.getTokenAt(textCursor);\n          const line = textCursor.line;\n          cm.getDoc().replaceRange(\n            cur.text,\n            { line: line, ch: token.start - 1 },\n            { line: line, ch: token.end }\n          );\n        },\n        //render?: (element: HTMLLIElement, data: Hints, cur: Hint) => void\n        //to?: Position\n      }));\n      return hints;\n    }\n\n    const cursor = cm.getCursor();\n    const token = cm.getTokenAt(cursor);\n    const start = token.start;\n    const end = cursor.ch;\n    const line = cursor.line;\n    //console.log(\"complete\")\n    const results = ep.getSuggestions(cm);\n    //console.log(results)\n    return {\n      list: results.length ? createHints(results, cursor) : [],\n      from: CodeMirror.Pos(line, start),\n      to: CodeMirror.Pos(line, end),\n    };\n  }\n}\nmodule.exports = new EmojiSense();\n"],"file":"emojisense.js"}