{"version":3,"sources":["../src/EmojiProvider.js"],"names":["EmojiProvider","loadProperties","fs","readFile","path","resolve","__dirname","error","content","properties","JSON","parse","keys","Object","getSuggestions","editor","replacementPrefix","prefix","getPrefix","length","Number","charAt","slice","unicodeEmojis","getUnicodeEmojiSuggestions","cm","cursor","getCursor","token","getTokenAt","currentWord","string","regexMatch","match","wordRegex","words","fuzzaldrin","filter","Array","from","map","word","text","emoji","rightLabel"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;AAEO,MAAMA,aAAN,CAAoB;AAAA;AAAA,uCACb,iBADa;;AAAA,wCAEZ,EAFY;;AAAA,kCAGlB,EAHkB;AAAA;;AAKzBC,EAAAA,cAAc,GAAG;AACf,WAAOC,EAAE,CAACC,QAAH,CACLC,IAAI,CAACC,OAAL,CAAaC,SAAb,EAAwB,IAAxB,EAA8B,iBAA9B,CADK,EAEL,CAACC,KAAD,EAAQC,OAAR,KAAoB;AAClB,UAAID,KAAJ,EAAW;AACT;AACD;;AACD,WAAKE,UAAL,GAAkBC,IAAI,CAACC,KAAL,CAAWH,OAAX,CAAlB;AACA,aAAQ,KAAKI,IAAL,GAAYC,MAAM,CAACD,IAAP,CAAY,KAAKH,UAAjB,CAApB;AACD,KARI,CAAP;AAUD;;AAEDK,EAAAA,cAAc,CAACC,MAAD,EAAS;AACrB,QAAIC,iBAAJ;AACA,QAAIC,MAAM,GAAG,KAAKC,SAAL,CAAeH,MAAf,CAAb;;AACA,QAAI,EAAE,CAACE,MAAM,IAAI,IAAV,GAAiBA,MAAM,CAACE,MAAxB,GAAiCC,MAAlC,KAA6C,CAA/C,CAAJ,EAAuD;AACrD,aAAO,EAAP;AACD;;AAED,QAAIH,MAAM,CAACI,MAAP,CAAc,CAAd,MAAqB,GAAzB,EAA8B;AAC5BL,MAAAA,iBAAiB,GAAGC,MAApB;AACAA,MAAAA,MAAM,GAAGA,MAAM,CAACK,KAAP,CAAa,CAAb,CAAT;AACD;;AAED,UAAMC,aAAa,GAAG,KAAKC,0BAAL,CAAgCP,MAAhC,CAAtB;AACA,WAAOM,aAAP;AACD;;AAEDL,EAAAA,SAAS,CAACO,EAAD,EAAK;AACZ,UAAMC,MAAM,GAAGD,EAAE,CAACE,SAAH,EAAf;AACA,UAAMC,KAAK,GAAGH,EAAE,CAACI,UAAH,CAAcH,MAAd,EAAsB,IAAtB,CAAd;AACA,UAAMI,WAAW,GAAI,IAAGF,KAAK,CAACG,MAAO,EAArC,CAHY,CAG4B;;AACxC,UAAMC,UAAU,GAAGF,WAAW,CAACG,KAAZ,CAAkB,KAAKC,SAAvB,CAAnB;AACA,UAAMD,KAAK,GAAGD,UAAU,GAAGA,UAAU,CAAC,CAAD,CAAb,GAAmB,GAA3C;AACA,WAAOC,KAAP;AACD;;AAEDT,EAAAA,0BAA0B,CAACP,MAAD,EAAS;AACjC,UAAMkB,KAAK,GAAGC,UAAU,CAACC,MAAX,CAAkB,KAAKzB,IAAvB,EAA6BK,MAAM,CAACK,KAAP,CAAa,CAAb,CAA7B,CAAd;AACA,WAAOgB,KAAK,CAACC,IAAN,CAAWJ,KAAX,EAAkBK,GAAlB,CAAuBC,IAAD,KAAW;AACtCC,MAAAA,IAAI,EAAE,KAAKjC,UAAL,CAAgBgC,IAAhB,EAAsBE,KADU;AAEtC3B,MAAAA,iBAAiB,EAAEC,MAFmB;AAGtC2B,MAAAA,UAAU,EAAEH;AAH0B,KAAX,CAAtB,CAAP;AAKD;;AAlDwB","sourcesContent":["import * as fs from \"fs\";\nimport * as path from \"path\";\nimport * as fuzzaldrin from \"fuzzaldrin\";\n\nexport class EmojiProvider {\n  wordRegex = /::?[\\w\\d_\\+-]+$/;\n  properties = {};\n  keys = [];\n\n  loadProperties() {\n    return fs.readFile(\n      path.resolve(__dirname, \"..\", \"properties.json\"),\n      (error, content) => {\n        if (error) {\n          return;\n        }\n        this.properties = JSON.parse(content);\n        return (this.keys = Object.keys(this.properties));\n      }\n    );\n  }\n\n  getSuggestions(editor) {\n    let replacementPrefix;\n    let prefix = this.getPrefix(editor);\n    if (!((prefix != null ? prefix.length : Number) >= 2)) {\n      return [];\n    }\n\n    if (prefix.charAt(1) === \":\") {\n      replacementPrefix = prefix;\n      prefix = prefix.slice(1);\n    }\n\n    const unicodeEmojis = this.getUnicodeEmojiSuggestions(prefix);\n    return unicodeEmojis;\n  }\n\n  getPrefix(cm) {\n    const cursor = cm.getCursor();\n    const token = cm.getTokenAt(cursor, true);\n    const currentWord = `:${token.string}`; //prepend ':'\n    const regexMatch = currentWord.match(this.wordRegex);\n    const match = regexMatch ? regexMatch[0] : \":\";\n    return match;\n  }\n\n  getUnicodeEmojiSuggestions(prefix) {\n    const words = fuzzaldrin.filter(this.keys, prefix.slice(1));\n    return Array.from(words).map((word) => ({\n      text: this.properties[word].emoji,\n      replacementPrefix: prefix,\n      rightLabel: word,\n    }));\n  }\n}\n"],"file":"EmojiProvider.js"}